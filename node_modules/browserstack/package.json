{
  "_args": [
    [
      {
        "raw": "node-browserstack@git://github.com/ably-forks/node-browserstack.git#c29160666504f5d91c1dedaa33e7d04b1dc8516a",
        "scope": null,
        "escapedName": "node-browserstack",
        "name": "node-browserstack",
        "rawSpec": "git://github.com/ably-forks/node-browserstack.git#c29160666504f5d91c1dedaa33e7d04b1dc8516a",
        "spec": "git://github.com/ably-forks/node-browserstack.git#c29160666504f5d91c1dedaa33e7d04b1dc8516a",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:ably-forks/node-browserstack.git#c29160666504f5d91c1dedaa33e7d04b1dc8516a",
          "sshUrl": "git+ssh://git@github.com/ably-forks/node-browserstack.git#c29160666504f5d91c1dedaa33e7d04b1dc8516a",
          "httpsUrl": "git+https://github.com/ably-forks/node-browserstack.git#c29160666504f5d91c1dedaa33e7d04b1dc8516a",
          "gitUrl": "git://github.com/ably-forks/node-browserstack.git#c29160666504f5d91c1dedaa33e7d04b1dc8516a",
          "shortcut": "github:ably-forks/node-browserstack#c29160666504f5d91c1dedaa33e7d04b1dc8516a",
          "directUrl": "https://raw.githubusercontent.com/ably-forks/node-browserstack/c29160666504f5d91c1dedaa33e7d04b1dc8516a/package.json"
        }
      },
      "C:\\Users\\nnamdi\\Desktop\\Bootcamp Project\\bc-19-Twitter-sentimental-analysis\\node_modules\\watson"
    ]
  ],
  "_from": "git://github.com/ably-forks/node-browserstack.git#c29160666504f5d91c1dedaa33e7d04b1dc8516a",
  "_id": "browserstack@0.2.0",
  "_inCache": true,
  "_installable": true,
  "_location": "/browserstack",
  "_phantomChildren": {},
  "_requested": {
    "raw": "node-browserstack@git://github.com/ably-forks/node-browserstack.git#c29160666504f5d91c1dedaa33e7d04b1dc8516a",
    "scope": null,
    "escapedName": "node-browserstack",
    "name": "node-browserstack",
    "rawSpec": "git://github.com/ably-forks/node-browserstack.git#c29160666504f5d91c1dedaa33e7d04b1dc8516a",
    "spec": "git://github.com/ably-forks/node-browserstack.git#c29160666504f5d91c1dedaa33e7d04b1dc8516a",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:ably-forks/node-browserstack.git#c29160666504f5d91c1dedaa33e7d04b1dc8516a",
      "sshUrl": "git+ssh://git@github.com/ably-forks/node-browserstack.git#c29160666504f5d91c1dedaa33e7d04b1dc8516a",
      "httpsUrl": "git+https://github.com/ably-forks/node-browserstack.git#c29160666504f5d91c1dedaa33e7d04b1dc8516a",
      "gitUrl": "git://github.com/ably-forks/node-browserstack.git#c29160666504f5d91c1dedaa33e7d04b1dc8516a",
      "shortcut": "github:ably-forks/node-browserstack#c29160666504f5d91c1dedaa33e7d04b1dc8516a",
      "directUrl": "https://raw.githubusercontent.com/ably-forks/node-browserstack/c29160666504f5d91c1dedaa33e7d04b1dc8516a/package.json"
    }
  },
  "_requiredBy": [],
  "_resolved": "git://github.com/ably-forks/node-browserstack.git#c29160666504f5d91c1dedaa33e7d04b1dc8516a",
  "_shasum": "909c5b86b1f9efb65811524a14277d288fedf176",
  "_shrinkwrap": null,
  "_spec": "node-browserstack@git://github.com/ably-forks/node-browserstack.git#c29160666504f5d91c1dedaa33e7d04b1dc8516a",
  "_where": "C:\\Users\\nnamdi\\Desktop\\Bootcamp Project\\bc-19-Twitter-sentimental-analysis\\node_modules\\watson",
  "author": {
    "name": "Scott GonzÃ¡lez",
    "email": "scott.gonzalez@gmail.com",
    "url": "http://scottgonzalez.com"
  },
  "bugs": {
    "url": "https://github.com/scottgonzalez/node-browserstack/issues"
  },
  "dependencies": {},
  "description": "A client for working with the BrowserStack API.",
  "devDependencies": {
    "grunt": "0.3.x"
  },
  "engines": {
    "node": ">=0.4.0"
  },
  "gitHead": "c29160666504f5d91c1dedaa33e7d04b1dc8516a",
  "homepage": "https://github.com/scottgonzalez/node-browserstack",
  "main": "lib/browserstack.js",
  "name": "browserstack",
  "optionalDependencies": {},
  "readme": "# node-browserstack\r\n\r\nA node.js JavaScript client for working with [BrowserStack](http://browserstack.com) through its [API](https://github.com/browserstack/api).\r\n\r\n## Installation\r\n\r\nInstallation instructions require install grom Github until these changes are merged into the main repo above.\r\n\r\n```\r\nnpm install node-browserstack\r\n```\r\n\r\nor add the following to your package.json file\r\n\r\n```javascript\r\n{\r\n  ...\r\n  \"dependencies\": {\r\n    ...\r\n    \"node-browserstack\": \"0.x\"\r\n    ...\r\n  },\r\n  ...\r\n}\r\n```\r\n\r\n## Usage\r\n\r\n```javascript\r\nvar BrowserStack = require( \"browserstack\" );\r\nvar client = BrowserStack.createClient({\r\n  username: \"foo\",\r\n  password: \"p455w0rd!!1\"\r\n});\r\n\r\nclient.getBrowsers(function( error, browsers ) {\r\n  console.log( \"The following browsers are available for testing\" );\r\n  console.log( browsers );\r\n});\r\n```\r\n\r\n## API\r\n\r\n### browser objects\r\n\r\nA common pattern in the API is a \"browser object\" which is just a plain object with the following properties:\r\n\r\n* `os`: The operating system.\r\n* `os_version`: The operating system version.\r\n* `browser`: The browser name.\r\n* `browser_version`: The browser or device version.\r\n* `device`: The device name.\r\n\r\n#### API V2 uses the following:\r\n\r\n* `os`: The operating system.\r\n* `browser`: The browser name.\r\n* `device`: The device name.\r\n* `version`: The browser or device version.\r\n\r\nA browser object may only have one of `browser` or `device` set; which property is set will depend on `os`.\r\n\r\n#### API V1 varies as follows:\r\n\r\n*V1 does not support multiple operating systems.\r\nAs such, there is no `os` version, and browser objects will always use `browser`.*\r\n\r\n### worker objects\r\n\r\nWorker objects are extended [browser objects](#browser-objects) which contain the following additional properties:\r\n\r\n* `id`: The worker id.\r\n* `status`: A string representing the current status of the worker.\r\n  * Possible statuses: `\"running\"`, `\"queue\"`.\r\n\r\n### BrowserStack.createClient( settings )\r\n\r\nCreates a new client instance.\r\n\r\n* `settings`: A hash of settings that apply to all requests for the new client.\r\n  * `username`: The username for the BrowserStack account.\r\n  * `password`: The password for the BrowserStack account.\r\n  * `version` (optional; default: `3`): Which version of the BrowserStack API to use.  Please refer to [BrowserStack API](https://github.com/browserstack/api/) for a list of API versions by branch.\r\n  * `server` (optional; default: `{ host: \"api.browserstack.com\", port: 80 }`): An object containing `host` and `port` to connect to a different BrowserStack API compatible service.\r\n\r\n### client.getBrowsers( callback )\r\n\r\nGets the list of available browsers.\r\n\r\n* `callback` (`function( error, browsers )`): A callback to invoke when the API call is complete.\r\n  * `browsers`: An array of [browser objects](#browser-objects).\r\n\r\n### client.createWorker( settings, callback )\r\n\r\nCreates a worker.\r\n\r\n* `settings`: A hash of settings for the worker (an extended [browser object](#browser-objects)).\r\n  * `os`: Which OS to use for the new worker.\r\n  * `os_version`: Which OS version to use for the new worker.\r\n  * `browser`/`device`: Which browser/device to use in the new worker. Which property to use depends on the OS.\r\n  * `browser_versoin`: Which version of the specified browser to use.\r\n  * `url` (optional): Which URL to navigate to upon creation.\r\n  * `timeout` (optional): Maximum life of the worker (in seconds). Use 0 for \"forever\" (BrowserStack will kill the worker after 1,800 seconds).\r\n* `callback` (`function( error, worker )`): A callback to invoke when the API call is complete.\r\n  * `worker` A [worker object](#worker-objects).\r\n\r\n*Note: A special value of \"latest\" is supported for `version`, which will use the latest stable version.*\r\n\r\n*API Note: The above parameters are compatible with [version 3 of the API](https://github.com/browserstack/api/tree/v3). [Version 2](https://github.com/browserstack/api/tree/v2) and [Version 1](https://github.com/browserstack/api/tree/v1) are also supported*\r\n\r\n### client.getWorker( id, callback )\r\n\r\nGets the status of a worker.\r\n\r\n* `id`: The id of the worker.\r\n* `callback` (`function( error, worker )`): A callback to invoke when the API call is complete.\r\n  * `worker`: A [worker object](#worker-objects).\r\n\r\n### client.terminateWorker( id, callback )\r\n\r\nTerminates an active worker.\r\n\r\n* `id`: The id of the worker to terminate.\r\n* `callback` (`function( error, data )`): A callback to invoke when the API call is complete.\r\n  * `data`: An object with a `time` property indicating how long the worker was alive.\r\n\r\n### client.getWorkers( callback )\r\n\r\nGets the status of all workers.\r\n\r\n* `callback` (`function( error, workers )`): A callback to invoke when the API call is complete.\r\n  * `workers`: An array of [worker objects](#worker-objects).\r\n\r\n### client.getLatest( browser, callback )\r\n\r\nGets the latest version of a browser.\r\n\r\n* `browser`: Which browser to get the latest version for.\r\n* `callback` (`function( error, version )`): A callback to invoke when the version is determined.\r\n  * `version`: The latest version of the browser.\r\n\r\n### client.getLatest( callback )\r\n\r\nGets the latest version of all browsers.\r\n\r\n* `callback` (`function( error, versions )`): A callback to invoke when the versions are determined.\r\n  * `versions`: A hash of browser names and versions.\r\n\r\n### client.getApiStatus( callback )\r\n\r\nGets the status of your API, see [BrowserStack API Status](https://github.com/browserstack/api#getting-api-status).\r\n\r\n* `callback` (`function( error, versions )`): A callback to invoke when the versions are determined.\r\n  * `status`: A hash representing the API status.\r\n\r\n## License\r\n\r\nnode-browserstack is licensed under the MIT license.\r\n",
  "readmeFilename": "readme.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/scottgonzalez/node-browserstack.git"
  },
  "version": "0.2.0"
}
